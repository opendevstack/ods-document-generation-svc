buildscript {
  ext {
    groovyallVersion = '3.0.9'
    springbootVersion = "2.6.2"
    springCloudVersion = '3.1.0'
    spockCoreVersion = "2.0-groovy-3.0"
    spockReportsVersion = '2.1-groovy-3.0'
  }

  repositories {
    println("using repositories 'jcenter' and 'mavenCentral'")
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
      url "https://repo1.maven.org/maven2/"
      mavenContent {
        releasesOnly()
      }
    }
    maven {
      url "https://repo.jenkins-ci.org/releases/"
      mavenContent {
        releasesOnly()
      }
    }
  }
}

plugins {
  id "groovy"
  id 'com.adarshr.test-logger' version '3.1.0'
  id 'jacoco'
  id 'org.springframework.boot' version "${springbootVersion}"
  id 'com.bmuschko.docker-spring-boot-application' version '7.1.0'
  id "io.gatling.gradle" version "3.7.3"
}
// related to gatling and Springboot
ext['netty.version'] = '4.0.51.Final'

repositories {
  mavenCentral()
  println("using repositories 'jcenter' and 'mavenCentral'")
  mavenCentral()
}

group = 'org.ods'
version = '1.0'

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

compileGroovy {
  groovyOptions.javaAnnotationProcessing = true
}

configurations.all {
  resolutionStrategy {
    force (group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyallVersion)
  }
}

dependencies {
  implementation("org.codehaus.groovy:groovy-json:3.0.9")

  implementation (group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyallVersion){
    exclude group: "org.codehaus.groovy", module: "groovy-test-junit5"
  }

  implementation "org.springframework.boot:spring-boot-starter:${springbootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-cache:${springbootVersion}"
  implementation "org.springframework.cloud:spring-cloud-starter-loadbalancer:${springCloudVersion}"
  implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}"

  implementation("javax.inject:javax.inject:1")
  implementation("javax.cache:cache-api:1.1.1")

  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.github.ben-manes.caffeine:caffeine:3.0.5'
  implementation 'com.github.jknack:handlebars:4.3.0'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'io.github.openfeign:feign-core:11.8'
  implementation 'io.github.openfeign:feign-gson:11.8'
  implementation 'io.github.openfeign:feign-okhttp:11.8'
  implementation 'io.github.openfeign:feign-jackson:11.8'

  implementation 'net.lingala.zip4j:zip4j:2.9.1'
  implementation 'org.apache.httpcomponents:httpclient:4.5.13'
  implementation "org.apache.pdfbox:pdfbox:2.0.24"

  implementation("ch.qos.logback:logback-classic:1.2.10")
  implementation 'org.eclipse.jgit:org.eclipse.jgit:6.0.0.202111291000-r'

  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "org.junit.jupiter:junit-jupiter-engine"
  testImplementation("uk.org.webcompere:system-stubs-core:1.2.0")
  testImplementation "org.testcontainers:spock:1.16.3"
  testImplementation("org.testcontainers:testcontainers:1.16.3")

  testImplementation("org.spockframework:spock-core:${spockCoreVersion}")
  testImplementation ("com.athaydes:spock-reports:$spockReportsVersion"){ transitive = false }
  testImplementation "org.spockframework:spock-spring:${spockCoreVersion}"
  testImplementation "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"

  testImplementation "com.github.stefanbirkner:system-rules:1.19.0"
  testImplementation "com.github.tomakehurst:wiremock-jre8:2.32.0"
  testImplementation 'io.rest-assured:rest-assured:4.4.0'

  gatlingImplementation 'org.awaitility:awaitility:4.1.1'
  gatlingImplementation 'io.rest-assured:rest-assured:4.4.0'

  // From shared lib
  implementation("com.konghq:unirest-java:3.13.4")
  implementation("org.yaml:snakeyaml:1.30")
  implementation("com.vladsch.flexmark:flexmark-all:0.62.2")
  implementation("fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.core:2.0.2")
  implementation("fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.pdf:2.0.2")
  implementation("org.apache.poi:poi-ooxml:4.1.2")
  implementation("org.apache.pdfbox:pdfbox:2.0.25")
  implementation("net.lingala.zip4j:zip4j:2.9.1")
  implementation("com.xlson.groovycsv:groovycsv:1.3")

  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
  testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

  testImplementation "com.github.stefanbirkner:system-rules:1.19.0" // for managing environment variables
  testImplementation "org.hamcrest:hamcrest:2.1"
  testImplementation "org.skyscreamer:jsonassert:1.5.0"

  testImplementation("au.com.dius:pact-jvm-provider:4.0.10")
  testImplementation("au.com.dius:pact-jvm-provider-junit:4.0.10")
}

test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
  filter {
    excludeTestsMatching "*IT"
  }
  systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
  systemProperty 'com.athaydes.spockframework.report.projectName', 'docGen'
  systemProperty 'com.athaydes.spockframework.report.projectVersion', version
  systemProperty "testRecordMode", project.findProperty('testRecordMode')?: false
  systemProperty "generateExpectedPdfFiles", project.findProperty('generateExpectedPdfFiles')?: false
  systemProperty "wiremock.textToReplace", project.findProperty('wiremock.textToReplace')?: ""

  systemProperties << executionProperties()

  maxHeapSize = "2048m"
  useJUnitPlatform()
}

task dockerTest(type: Test) {
  group("verification")
  filter {
    includeTestsMatching "*IT"
  }
  systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
  useJUnitPlatform()
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled true
    html.enabled true
  }
}

jacocoTestCoverageVerification {
  dependsOn jacocoTestReport
  violationRules {
    rule {
      limit {
        minimum = 0.7
      }
    }
  }
}

import com.bmuschko.gradle.docker.tasks.image.*
task buildImageBase(type: DockerBuildImage) {
  group = "docker"
  inputDir = file("src/main/resources")
  images.add('docgen-base:latest')
}

docker {
  springBootApplication {
    baseImage = 'docgen-base:latest'
    ports = [9090, 1111]
    images = ['ods-document-generation-svc:local']
    jvmArgs = ["-XX:+UseCompressedOops", "-XX:+UseG1GC", "-XX:MaxGCPauseMillis=100"]
  }
}

test.dependsOn(buildImageBase)
dockerBuildImage.dependsOn(bootJar, buildImageBase)
dockerTest.dependsOn(dockerBuildImage)

bootRun {
  systemProperties << executionProperties()
}

import com.bmuschko.gradle.docker.tasks.container.*

task createDocGenServer(type: DockerCreateContainer) {
  dependsOn dockerBuildImage
  targetImageId dockerBuildImage.getImageId()
  hostConfig.portBindings = ['8080:1111']
  hostConfig.autoRemove = true
}

task startDocGenServer(type: DockerStartContainer) {
  dependsOn createDocGenServer
  targetContainerId createDocGenServer.getContainerId()
}

task stopDocGenServer(type: DockerStopContainer) {
  targetContainerId createDocGenServer.getContainerId()
}

gatlingRun.group("verification")
gatlingRun.dependsOn(startDocGenServer)
gatlingRun.finalizedBy(stopDocGenServer)

check.dependsOn(jacocoTestCoverageVerification, dockerTest, gatlingRun)


Map executionProperties(){
  def bitbucket_url = "${project.findProperty('bitbucket_url') ?: System.getenv('BITBUCKET_HOST')}"
  def bitbucket_username = "${project.findProperty('bitbucket_username') ?: System.getenv('BITBUCKET_USERNAME')}"
  def bitbucket_password = "${project.findProperty('bitbucket_password') ?: System.getenv('BITBUCKET_PASSWORD')}"

  def jira_url = "${project.findProperty('jira_url') ?: System.getenv('JIRA_HOST')}"
  def jira_username = "${project.findProperty('jira_username') ?: System.getenv('JIRA_USERNAME')}"
  def jira_password = "${project.findProperty('jira_password') ?: System.getenv('JIRA_PASSWORD')}"

  def nexus_url = "${project.findProperty('nexus_url') ?: System.getenv('NEXUS_HOST')}"
  def nexus_username = "${project.findProperty('nexus_username') ?: System.getenv('NEXUS_USERNAME')}"
  def nexus_password = "${project.findProperty('nexus_password') ?: System.getenv('NEXUS_PASSWORD')}"

  return [
          "BITBUCKET_URL": bitbucket_url,
          "BITBUCKET_USERNAME": bitbucket_username,
          "BITBUCKET_PASSWORD": bitbucket_password,

          "JIRA_URL": jira_url,
          "JIRA_USERNAME": jira_username,
          "JIRA_PASSWORD": jira_password,

          "NEXUS_URL": nexus_url,
          "NEXUS_USERNAME": nexus_username,
          "NEXUS_PASSWORD": nexus_password
   ]
}
