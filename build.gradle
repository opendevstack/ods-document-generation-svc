buildscript {
  ext {
    groovyallVersion = '3.0.9'
    springbootVersion = "2.6.2"
    spockCoreVersion = "2.0-groovy-3.0"
    spockReportsVersion = '2.1-groovy-3.0'

    nexus_url = "${project.findProperty('nexus_url') ?: System.getenv('NEXUS_HOST')}"
    nexus_user = "${project.findProperty('nexus_user') ?: System.getenv('NEXUS_USERNAME')}"
    nexus_pw = "${project.findProperty('nexus_pw') ?: System.getenv('NEXUS_PASSWORD')}"
    no_nexus = (project.findProperty('no_nexus') ?: System.getenv('NO_NEXUS') ?: false).toBoolean()
    if (!no_nexus && (nexus_url == "null" || nexus_user == "null" || nexus_pw == "null")) {
      throw new GradleException("property no_nexus='false' (or not defined) but at least one of the properties nexus_url, nexus_user or nexus_pw is not configured. Please configure those properties!")
    }
  }

  repositories {
    if (no_nexus) {
      println("using repositories 'jcenter' and 'mavenCentral', because property no_nexus=$no_nexus")
      mavenLocal()
      jcenter()
      mavenCentral()
      maven {
        url "https://repo1.maven.org/maven2/"
        mavenContent {
          releasesOnly()
        }
      }
      maven {
        url "https://repo.jenkins-ci.org/releases/"
        mavenContent {
          releasesOnly()
        }
      }
    } else {
      println("using nexus repositories")
      maven() {
        url "${nexus_url}/repository/jcenter/"
        credentials {
          username = "${nexus_user}"
          password = "${nexus_pw}"
        }
      }

      maven() {
        url "${nexus_url}/repository/maven-public/"
        credentials {
          username = "${nexus_user}"
          password = "${nexus_pw}"
        }
      }

      maven() {
        url "${nexus_url}/repository/atlassian_public/"
        credentials {
          username = "${nexus_user}"
          password = "${nexus_pw}"
        }
      }
    }
  }
}

plugins {
  id "groovy"
  //id 'com.adarshr.test-logger' version '3.1.0'
  id 'jacoco'
  id 'org.springframework.boot' version "${springbootVersion}"
  id 'com.bmuschko.docker-spring-boot-application' version '7.1.0'
  id "io.gatling.gradle" version "3.7.3"
}
// related to gatling and Springboot
ext['netty.version'] = '4.0.51.Final'

repositories {
  mavenCentral()
  if (no_nexus) {
    println("using repositories 'jcenter' and 'mavenCentral', because property no_nexus=$no_nexus")
    mavenCentral()
  } else {
    println("using nexus repositories")
    maven() {
      url "${nexus_url}/repository/jcenter/"
      credentials {
        username = "${nexus_user}"
        password = "${nexus_pw}"
      }
    }

    maven() {
      url "${nexus_url}/repository/maven-public/"
      credentials {
        username = "${nexus_user}"
        password = "${nexus_pw}"
      }
    }

    maven() {
      url "${nexus_url}/repository/atlassian_public/"
      credentials {
        username = "${nexus_user}"
        password = "${nexus_pw}"
      }
    }
  }
}

group = 'org.ods'
version = '1.0'

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

compileGroovy {
  groovyOptions.javaAnnotationProcessing = true
}

configurations.all {
  resolutionStrategy {
    force (group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyallVersion)
  }
}

dependencies {
  implementation (group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyallVersion){
    exclude group: "org.codehaus.groovy", module: "groovy-test-junit5"
  }

  implementation "org.springframework.boot:spring-boot-starter:${springbootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-cache:${springbootVersion}"

  implementation("javax.inject:javax.inject:1")
  implementation("javax.cache:cache-api:1.1.1")

  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.github.ben-manes.caffeine:caffeine:3.0.5'
  implementation 'com.github.jknack:handlebars:4.3.0'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'io.github.openfeign:feign-core:11.8'
  implementation 'io.github.openfeign:feign-gson:11.8'
  implementation 'io.github.openfeign:feign-okhttp:11.8'
  implementation 'net.lingala.zip4j:zip4j:2.9.1'
  implementation 'org.apache.httpcomponents:httpclient:4.5.13'
  implementation "org.apache.pdfbox:pdfbox:2.0.24"

  implementation("ch.qos.logback:logback-classic:1.2.10")


  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "org.junit.jupiter:junit-jupiter-engine"
  testImplementation("uk.org.webcompere:system-stubs-core:1.2.0")
  testImplementation "org.testcontainers:spock:1.16.2"
  testImplementation("org.testcontainers:testcontainers:1.16.2")

  testImplementation("org.spockframework:spock-core:${spockCoreVersion}")
  testImplementation ("com.athaydes:spock-reports:$spockReportsVersion"){ transitive = false }
  testImplementation "org.spockframework:spock-spring:${spockCoreVersion}"
  testImplementation "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"

  testImplementation "com.github.stefanbirkner:system-rules:1.19.0"
  testImplementation "com.github.tomakehurst:wiremock-jre8:2.32.0"
  testImplementation 'io.rest-assured:rest-assured:4.4.0'

  gatlingImplementation 'org.awaitility:awaitility:4.1.1'
  gatlingImplementation 'io.rest-assured:rest-assured:4.4.0'

  // From shared lib
  implementation("com.konghq:unirest-java:3.13.4")
  implementation("org.yaml:snakeyaml:1.30")
  implementation("com.vladsch.flexmark:flexmark-all:0.62.2")
  implementation("fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.core:2.0.2")
  implementation("fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.pdf:2.0.2")
  implementation("org.apache.pdfbox:pdfbox:2.0.25")
  implementation("org.apache.poi:poi:5.1.0")
  implementation("net.lingala.zip4j:zip4j:2.9.1")

  implementation("com.xlson.groovycsv:groovycsv:1.3")
  implementation "net.lingala.zip4j:zip4j:2.1.1"

/*  implementation 'org.slf4j:jcl-over-slf4j:1.7.30'
  implementation 'ch.qos.logback:logback-classic:1.2.3'
  implementation "com.konghq:unirest-java:2.4.03:standalone"
  implementation "fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.core:2.0.2"
  implementation "fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.pdf:2.0.2"
  implementation "org.apache.ivy:ivy:2.2.0"
  implementation "org.apache.pdfbox:pdfbox:2.0.23"
  implementation "org.apache.poi:poi:4.0.1"
  implementation "org.yaml:snakeyaml:1.24"
  implementation 'com.vladsch.flexmark:flexmark-all:0.60.2' // for markdown to pdf conversion (sonarqube reports)
  implementation 'com.xlson.groovycsv:groovycsv:1.3'*/

 // testImplementation ("com.athaydes:spock-reports:1.6.3") { transitive = false }
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
  testImplementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
 // testImplementation "com.lesfurets:jenkins-pipeline-unit:1.1"
 // testImplementation "net.bytebuddy:byte-buddy:1.10.8"
  //testImplementation "org.objenesis:objenesis:3.1"
  //testImplementation "cglib:cglib-nodep:3.3.0"                      // for mocking classes
  testImplementation "com.github.stefanbirkner:system-rules:1.19.0" // for managing environment variables
  testImplementation "org.hamcrest:hamcrest:2.1"
  testImplementation "org.skyscreamer:jsonassert:1.5.0"             // JSON Asserts
}

test {
  /*testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }*/
  filter {
    includeTestsMatching "*Spec"
  }
  systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
  systemProperty 'com.athaydes.spockframework.report.projectName', 'docGen'
  systemProperty 'com.athaydes.spockframework.report.projectVersion', version
  systemProperty "testRecordMode", project.findProperty('testRecordMode')?: false
  systemProperty "generateExpectedPdfFiles", project.findProperty('generateExpectedPdfFiles')?: false
  systemProperty "nexusURL", project.findProperty('nexusURL')?: "http://nexus.odsbox.lan:7990"
  systemProperty "sonarQuURL", project.findProperty('sonarQuURL')?: "http://sonar.odsbox.lan:7990"
  systemProperty "bitbucketURL", project.findProperty('bitbucketURL')?: "http://bitbucket.odsbox.lan:7990"
  systemProperty "docGenURL", project.findProperty('docGenURL')?: "http://docgen.odsbox.lan:8080"
  systemProperty "jiraURL", project.findProperty('jiraURL')?: "http://jira.odsbox.lan:8080"
  systemProperty "domainUser", project.findProperty('domainUser')?: "openshift"
  systemProperty "domainPassword", project.findProperty('domainPassword')?: "openshift"
  systemProperty "nexusUser", project.findProperty('nexusUser')?: "openshift"
  systemProperty "nexusPassword", project.findProperty('nexusPassword')?: "openshift"
  systemProperty "wiremock.textToReplace", project.findProperty('wiremock.textToReplace')?: ""
  maxHeapSize = "2048m"
  useJUnitPlatform()

  finalizedBy jacocoTestReport
}

task dockerTest(type: Test) {
  dependsOn(test)
  group("verification")
  filter {
    includeTestsMatching "*IT"
  }
  systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
  useJUnitPlatform()
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled true
    html.enabled true
  }
}

jacocoTestCoverageVerification {
  dependsOn jacocoTestReport
  violationRules {
    rule {
      limit {
        minimum = 0.7
      }
    }
  }
}

import com.bmuschko.gradle.docker.tasks.image.*
task buildImage(type: DockerBuildImage) {
  inputDir = file("src/main/resources")
  images.add('docgen-base:latest')
}

docker {
  springBootApplication {
    baseImage = 'docgen-base:latest'
    ports = [9090, 8080]
    images = ['ods-document-generation-svc:local']
    jvmArgs = ["-XX:+UseCompressedOops", "-XX:+UseG1GC", "-XX:MaxGCPauseMillis=100"]
  }
}
buildImage.dependsOn(bootJar)
dockerBuildImage.dependsOn(buildImage)
dockerTest.dependsOn(dockerBuildImage)

import com.bmuschko.gradle.docker.tasks.container.*

task createDocGenServer(type: DockerCreateContainer) {
  dependsOn dockerBuildImage
  targetImageId dockerBuildImage.getImageId()
  hostConfig.portBindings = ['8080:8080']
  hostConfig.autoRemove = true
}

task startDocGenServer(type: DockerStartContainer) {
  dependsOn createDocGenServer
  targetContainerId createDocGenServer.getContainerId()
}

task stopDocGenServer(type: DockerStopContainer) {
  targetContainerId createDocGenServer.getContainerId()
}

gatlingRun.group("verification")
gatlingRun.dependsOn(dockerTest, startDocGenServer)
gatlingRun.finalizedBy(stopDocGenServer)

check.dependsOn(jacocoTestCoverageVerification, gatlingRun)